<div <%= "id=#{(f.object.key || 'new_lookup_keys').to_s.gsub(' ','_')} class='tab-pane fields' " %> >
  <%= remove_child_link "Remove #{f.object.new_record? ? "Variable" : f.object}", f , {:class => 'btn btn-danger hide'} unless controller_name == "lookup_keys" %>
  <%=
    if params["puppetclass_id"] # new smart-var inside a puppetclass (REST nesting only)
      # Show the parent puppetclass as a context, but permit no change
      select_f f, :puppetclass_id, [Puppetclass.from_param(params["puppetclass_id"])], :id, :to_label, {}, {:label => "Puppet class", :disabled => true}
    else # new smart-var with no particular context
      # Give a select for choosing the parent puppetclass
      select_f f, :puppetclass_id, Puppetclass.all, :id, :to_label, { :include_blank => 'None' }, {:label => "Puppet class"}
    end unless @puppetclass # nested smart-vars form in a tab of puppetclass/_form: no edition allowed, and the puppetclass is already visible as a context
  %>
  <%= text_f f, :key, :label => "Name" %>
  <%= checkbox_f f, :is_param, :label => "Class parameter", :help_inline => popover("?", "Whether the smart-variable is a parameter of a parameterized class (checked), or a global parameter (unchecked).", :title => "Class parameter") %>
  <%= checkbox_f f, :is_mandatory, :label => "Mandatory", :help_inline => popover("?", "If checked, will raise an error if there is no default value and no matcher provide a value.", :title => "Mandatory") %>
  <%= text_f f, :description %>
  <%= field f, :default_value do -%>
    <%= label_tag('', :class=>'checkbox') do -%>
      <%= f.check_box :no_default_value, :onchange => "toggleTextFieldEmptyDisabled(getSiblingField(this, 'default_value'), isFieldChecked(this));", :'data-onready' => (f.object.no_default_value ? '$(this).attr("checked", true);$(this).trigger("change");' : '') %> None
    <% end -%>
    <%= f.text_area :default_value, :class => "span6", :rows => 2 %><span class="help-inline"><%= popover("?","value to use when there is no match", :title => "Default Value") %></span>
  <% end -%>
  <%= selectable_f f, :validator_type, options_for_select(LookupKey::VALIDATION_TYPES, f.object.validator_type),
    {},
    { :label => "Type Validator", :class => "medium",
      :help_inline => popover("?","<dl>
       <dt>String</dt> <dd>Everything is taken as a string.</dd>
       <dt>Regexp</dt> <dd>Regular expression to verify the string values.</dd>
       <dt>Range</dt> <dd>A range of valid values (eg.: <code>0..255</code>, <code>'bar'..'foo'</code>, <code>\"a\"..\"zz\"</code>). Use <code>...</code> to exclude the high bound.</dd>
       <dt>Boolean</dt> <dd>Common representation of boolean values are accepted.</dd>
       <dt>Integer</dt> <dd>Integer numbers only, can be negative.</dd>
       <dt>Real</dt> <dd>Accept any numerical input.</dd>
       <dt>List</dt> <dd>Accepts a few values, given as comma seperated values, e.g. <code>80,443</code> will accept only two values.<dd>
       <dt>Array</dt> <dd>A valid JSON or YAML input, that must evaluate to an array.</dd>
       <dt>Hash</dt> <dd>A valid JSON or YAML input, that must evaluate to an object/map/dict/hash.</dd>
       <dt>YAML</dt> <dd>Any valid YAML input.</dd>
       <dt>JSON</dt> <dd>Any valid JSON input.</dd>
       </dl>
       ", :title => "How values are validated").html_safe}
  %>
  <%= text_f f, :validator_rule, :label => "Validator constraint", :class => "span6",
    :help_inline => popover("?","Values to match Type validator, only used for \"regexp\" and \"list\"", :title => "Validator constraint")%>
  <%= textarea_f f, :path, :rows => "4", :value => f.object.path, :label => "Order",
    :help_inline => popover("?", "The order in which matchers keys are processed, first match wins.<br>
    You may use multiple attributes as a matcher key, for example, an order of <code>hostgroup, environment</code>
    would expect a matcher such as <code>hostgroup = \"web servers\", environment = production</code>", :title => "The order in which values are resolved").html_safe
  %>

  <%# the following field is required to see child validations %>
  <%= f.hidden_field :updated_at, :value => Time.now.to_i %>
  <div class="children_fields">
    <%= new_child_fields_template(f, :lookup_values, {:partial => "lookup_keys/value"}) %>
    <%= f.fields_for :lookup_values do |lookup_values| %>
      <%= render 'lookup_keys/value', :f => lookup_values %>
    <% end %>
    <%= add_child_link "+ Add Matcher-Value", :lookup_values, { :title => 'add a new matcher-value pair'} %>
  </div>
</div>
