<% unless klass.lookup_keys.empty? -%>
  <% klass.lookup_keys.each_with_index do |key,i| -%>
    <tr id="puppetclass_<%= klass.id %>_params[<%= key.id %>]">
      <%= content_tag :td, (i == 0 ? {:rowspan => klass.lookup_keys.size} : {:class => 'hide'}) do
        # In order to use the class .hide-first-col, we must have an extra, invisible cell.
        # Plus, we make the class name available from javascript without having to look at any previous row.
        content_tag :span, klass.name, :'data-property' => 'class'
      end %>
      <%
        name = key.key
        infos = { :used_matcher => nil }
        errors = Set.new
        value_orig = key.value_for host, host_facts, :obs_matcher_block => Proc.new { |h| infos = h }, :on_unavailable_fact => Proc.new { |f,h| errors << f; "{UNKNOWN_FACT:#{f}}" }
        value = key.value_before_type_cast value_orig
        origin = '(default value)'
        origin = infos[:used_matcher] unless infos[:used_matcher].nil?
        diagnostic_class = []
        diagnostic_helper = nil
        if value_orig.nil?
          if key.is_mandatory
            diagnostic_class << 'error'
            diagnostic_helper = popover 'No value error', 'Mandatory parameter without value.<br/><b>Please override!</b>'
          else
            diagnostic_class << 'warning'
            diagnostic_helper = popover 'No value warning', 'Optional parameter without value.<br/><i>Won\'t be given to Puppet.</i>'
          end
        end
        if errors.size > 0
          diagnostic_class.delete 'warning'
          diagnostic_class << 'error'
          diagnostic_helper = popover 'Fact error', 'One or more unknown facts were encountered during evaluation:<ul>' + errors.sort.map {|v| "<li>#{v}</li>" }.join + '</ul>'
        end
      -%>
      <td><%= content_tag :span, name, :class => "span2", :'data-property' => 'name' %></td>
      <td>
        <%= content_tag :div, :class => ['control-group'] + diagnostic_class do -%>
          <%= text_area_tag "value_#{name}", value, :rows => 2, :class => ['span4'], :'data-property' => 'value', :disabled => true %>
          <%= diagnostic_helper %>
        <% end -%>
      </td>
      <td><%= content_tag :span, key.validator_type, :class => "span1", :'data-property' => 'type' %></td>
      <td><%= content_tag :span, origin, :class => "span2" %></td>
      <td><span class="help-inline">
          <%= link_to_function(icon_text("random"), "override_class_param(this)", :title => "Override this value", :'data-tag' => 'override') if authorized_via_my_scope("host_editing", "create_params") %>
      </span></td>
    </tr>
  <% end -%>
<% end -%>
